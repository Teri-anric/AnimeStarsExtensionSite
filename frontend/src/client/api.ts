/* tslint:disable */
/* eslint-disable */
/**
 * Anime Stars
 * Unofficial Anime Stars API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @enum {string}
 */

export const CardCollection = {
    Trade: 'trade',
    Need: 'need',
    Owned: 'owned'
} as const;

export type CardCollection = typeof CardCollection[keyof typeof CardCollection];


/**
 * 
 * @export
 * @interface CardFilter
 */
export interface CardFilter {
    /**
     * 
     * @type {Array<CardFilter>}
     * @memberof CardFilter
     */
    'and'?: Array<CardFilter> | null;
    /**
     * 
     * @type {Array<CardFilter>}
     * @memberof CardFilter
     */
    'or'?: Array<CardFilter> | null;
    /**
     * 
     * @type {EnumFliedFilterUUID}
     * @memberof CardFilter
     */
    'id'?: EnumFliedFilterUUID | null;
    /**
     * 
     * @type {EnumFliedFilterInt}
     * @memberof CardFilter
     */
    'card_id'?: EnumFliedFilterInt | null;
    /**
     * 
     * @type {StringFieldFilter}
     * @memberof CardFilter
     */
    'name'?: StringFieldFilter | null;
    /**
     * 
     * @type {EnumFliedFilterCardType}
     * @memberof CardFilter
     */
    'rank'?: EnumFliedFilterCardType | null;
    /**
     * 
     * @type {StringFieldFilter}
     * @memberof CardFilter
     */
    'anime_name'?: StringFieldFilter | null;
    /**
     * 
     * @type {StringFieldFilter}
     * @memberof CardFilter
     */
    'anime_link'?: StringFieldFilter | null;
    /**
     * 
     * @type {StringFieldFilter}
     * @memberof CardFilter
     */
    'author'?: StringFieldFilter | null;
    /**
     * 
     * @type {StringFieldFilter}
     * @memberof CardFilter
     */
    'image'?: StringFieldFilter | null;
    /**
     * 
     * @type {StringFieldFilter}
     * @memberof CardFilter
     */
    'mp4'?: StringFieldFilter | null;
    /**
     * 
     * @type {StringFieldFilter}
     * @memberof CardFilter
     */
    'webm'?: StringFieldFilter | null;
}
/**
 * 
 * @export
 * @interface CardId
 */
export interface CardId {
}
/**
 * 
 * @export
 * @interface CardPaginationResponse
 */
export interface CardPaginationResponse {
    /**
     * 
     * @type {number}
     * @memberof CardPaginationResponse
     */
    'total': number;
    /**
     * 
     * @type {number}
     * @memberof CardPaginationResponse
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof CardPaginationResponse
     */
    'per_page': number;
    /**
     * 
     * @type {Array<CardSchema>}
     * @memberof CardPaginationResponse
     */
    'items': Array<CardSchema>;
    /**
     * 
     * @type {number}
     * @memberof CardPaginationResponse
     */
    'total_pages': number;
    /**
     * 
     * @type {boolean}
     * @memberof CardPaginationResponse
     */
    'has_next': boolean;
}
/**
 * 
 * @export
 * @interface CardQuery
 */
export interface CardQuery {
    /**
     * 
     * @type {CardFilter}
     * @memberof CardQuery
     */
    'filter'?: CardFilter | null;
    /**
     * 
     * @type {string}
     * @memberof CardQuery
     */
    'order_by'?: CardQueryOrderByEnum | null;
    /**
     * 
     * @type {number}
     * @memberof CardQuery
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof CardQuery
     */
    'per_page'?: number;
}

export const CardQueryOrderByEnum = {
    IdAsc: 'id asc',
    IdDesc: 'id desc',
    Id: 'id',
    CardIdAsc: 'card_id asc',
    CardIdDesc: 'card_id desc',
    CardId: 'card_id',
    NameAsc: 'name asc',
    NameDesc: 'name desc',
    Name: 'name',
    RankAsc: 'rank asc',
    RankDesc: 'rank desc',
    Rank: 'rank',
    AnimeNameAsc: 'anime_name asc',
    AnimeNameDesc: 'anime_name desc',
    AnimeName: 'anime_name',
    AnimeLinkAsc: 'anime_link asc',
    AnimeLinkDesc: 'anime_link desc',
    AnimeLink: 'anime_link',
    AuthorAsc: 'author asc',
    AuthorDesc: 'author desc',
    Author: 'author',
    ImageAsc: 'image asc',
    ImageDesc: 'image desc',
    Image: 'image',
    Mp4Asc: 'mp4 asc',
    Mp4Desc: 'mp4 desc',
    Mp4: 'mp4',
    WebmAsc: 'webm asc',
    WebmDesc: 'webm desc',
    Webm: 'webm'
} as const;

export type CardQueryOrderByEnum = typeof CardQueryOrderByEnum[keyof typeof CardQueryOrderByEnum];

/**
 * 
 * @export
 * @interface CardSchema
 */
export interface CardSchema {
    /**
     * 
     * @type {string}
     * @memberof CardSchema
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof CardSchema
     */
    'card_id': number;
    /**
     * 
     * @type {string}
     * @memberof CardSchema
     */
    'name': string;
    /**
     * 
     * @type {CardType}
     * @memberof CardSchema
     */
    'rank': CardType;
    /**
     * 
     * @type {string}
     * @memberof CardSchema
     */
    'anime_name': string | null;
    /**
     * 
     * @type {string}
     * @memberof CardSchema
     */
    'anime_link': string | null;
    /**
     * 
     * @type {string}
     * @memberof CardSchema
     */
    'author': string | null;
    /**
     * 
     * @type {string}
     * @memberof CardSchema
     */
    'image': string | null;
    /**
     * 
     * @type {string}
     * @memberof CardSchema
     */
    'mp4': string | null;
    /**
     * 
     * @type {string}
     * @memberof CardSchema
     */
    'webm': string | null;
    /**
     * 
     * @type {string}
     * @memberof CardSchema
     */
    'created_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof CardSchema
     */
    'updated_at': string | null;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const CardType = {
    Ass: 'ass',
    S: 's',
    A: 'a',
    B: 'b',
    C: 'c',
    D: 'd',
    E: 'e'
} as const;

export type CardType = typeof CardType[keyof typeof CardType];


/**
 * 
 * @export
 * @interface CardUsersSummaryResponse
 */
export interface CardUsersSummaryResponse {
    /**
     * 
     * @type {CardUsersSummarySchema}
     * @memberof CardUsersSummaryResponse
     */
    'owned'?: CardUsersSummarySchema | null;
    /**
     * 
     * @type {CardUsersSummarySchema}
     * @memberof CardUsersSummaryResponse
     */
    'trade'?: CardUsersSummarySchema | null;
    /**
     * 
     * @type {CardUsersSummarySchema}
     * @memberof CardUsersSummaryResponse
     */
    'need'?: CardUsersSummarySchema | null;
}
/**
 * 
 * @export
 * @interface CardUsersSummarySchema
 */
export interface CardUsersSummarySchema {
    /**
     * 
     * @type {string}
     * @memberof CardUsersSummarySchema
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof CardUsersSummarySchema
     */
    'card_id': number;
    /**
     * 
     * @type {CardCollection}
     * @memberof CardUsersSummarySchema
     */
    'collection': CardCollection;
    /**
     * 
     * @type {SummaryCardState}
     * @memberof CardUsersSummarySchema
     */
    'state': SummaryCardState;
    /**
     * 
     * @type {number}
     * @memberof CardUsersSummarySchema
     */
    'count': number;
}


/**
 * Schema for detailed deck view with all cards
 * @export
 * @interface DeckDetailSchema
 */
export interface DeckDetailSchema {
    /**
     * 
     * @type {string}
     * @memberof DeckDetailSchema
     */
    'anime_link': string;
    /**
     * 
     * @type {string}
     * @memberof DeckDetailSchema
     */
    'anime_name': string | null;
    /**
     * 
     * @type {Array<CardSchema>}
     * @memberof DeckDetailSchema
     */
    'cards': Array<CardSchema>;
}
/**
 * Paginated response for deck listings
 * @export
 * @interface DeckPaginationResponse
 */
export interface DeckPaginationResponse {
    /**
     * 
     * @type {Array<DeckSummarySchema>}
     * @memberof DeckPaginationResponse
     */
    'items': Array<DeckSummarySchema>;
    /**
     * 
     * @type {number}
     * @memberof DeckPaginationResponse
     */
    'total': number;
    /**
     * 
     * @type {number}
     * @memberof DeckPaginationResponse
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof DeckPaginationResponse
     */
    'per_page': number;
    /**
     * 
     * @type {number}
     * @memberof DeckPaginationResponse
     */
    'total_pages': number;
}
/**
 * Schema for deck summary in listings
 * @export
 * @interface DeckSummarySchema
 */
export interface DeckSummarySchema {
    /**
     * 
     * @type {string}
     * @memberof DeckSummarySchema
     */
    'anime_link': string;
    /**
     * 
     * @type {string}
     * @memberof DeckSummarySchema
     */
    'anime_name': string | null;
    /**
     * 
     * @type {number}
     * @memberof DeckSummarySchema
     */
    'card_count': number;
    /**
     * First 6 cards for preview
     * @type {Array<CardSchema>}
     * @memberof DeckSummarySchema
     */
    'preview_cards'?: Array<CardSchema>;
}
/**
 * 
 * @export
 * @interface EnumFliedFilterCardType
 */
export interface EnumFliedFilterCardType {
    /**
     * 
     * @type {CardType}
     * @memberof EnumFliedFilterCardType
     */
    'eq'?: CardType | null;
    /**
     * 
     * @type {CardType}
     * @memberof EnumFliedFilterCardType
     */
    'ne'?: CardType | null;
    /**
     * 
     * @type {Array<CardType>}
     * @memberof EnumFliedFilterCardType
     */
    'in'?: Array<CardType> | null;
    /**
     * 
     * @type {Array<CardType>}
     * @memberof EnumFliedFilterCardType
     */
    'not_in'?: Array<CardType> | null;
    /**
     * 
     * @type {boolean}
     * @memberof EnumFliedFilterCardType
     */
    'is_null'?: boolean | null;
}


/**
 * 
 * @export
 * @interface EnumFliedFilterInt
 */
export interface EnumFliedFilterInt {
    /**
     * 
     * @type {number}
     * @memberof EnumFliedFilterInt
     */
    'eq'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof EnumFliedFilterInt
     */
    'ne'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof EnumFliedFilterInt
     */
    'in'?: Array<number> | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof EnumFliedFilterInt
     */
    'not_in'?: Array<number> | null;
    /**
     * 
     * @type {boolean}
     * @memberof EnumFliedFilterInt
     */
    'is_null'?: boolean | null;
}
/**
 * 
 * @export
 * @interface EnumFliedFilterUUID
 */
export interface EnumFliedFilterUUID {
    /**
     * 
     * @type {string}
     * @memberof EnumFliedFilterUUID
     */
    'eq'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnumFliedFilterUUID
     */
    'ne'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof EnumFliedFilterUUID
     */
    'in'?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof EnumFliedFilterUUID
     */
    'not_in'?: Array<string> | null;
    /**
     * 
     * @type {boolean}
     * @memberof EnumFliedFilterUUID
     */
    'is_null'?: boolean | null;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface HealthResponse
 */
export interface HealthResponse {
    /**
     * 
     * @type {string}
     * @memberof HealthResponse
     */
    'status': string;
}
/**
 * Filter for string fields with text-specific operators
 * @export
 * @interface StringFieldFilter
 */
export interface StringFieldFilter {
    /**
     * 
     * @type {string}
     * @memberof StringFieldFilter
     */
    'eq'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StringFieldFilter
     */
    'ne'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StringFieldFilter
     */
    'like'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StringFieldFilter
     */
    'ilike'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StringFieldFilter
     */
    'not_like'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StringFieldFilter
     */
    'contains'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StringFieldFilter
     */
    'icontains'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StringFieldFilter
     */
    'not_contains'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof StringFieldFilter
     */
    'in'?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof StringFieldFilter
     */
    'not_in'?: Array<string> | null;
    /**
     * 
     * @type {boolean}
     * @memberof StringFieldFilter
     */
    'is_null'?: boolean | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const SummaryCardState = {
    Locked: 'locked',
    Unlocked: 'unlocked'
} as const;

export type SummaryCardState = typeof SummaryCardState[keyof typeof SummaryCardState];


/**
 * 
 * @export
 * @interface Token
 */
export interface Token {
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'access_token': string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'token_type'?: string;
}
/**
 * 
 * @export
 * @interface UserCreate
 */
export interface UserCreate {
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'id': string;
    /**
     * 
     * @type {boolean}
     * @memberof UserResponse
     */
    'is_active': boolean;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'created_at': string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Login
         * @param {string} username 
         * @param {string} password 
         * @param {string | null} [grantType] 
         * @param {string} [scope] 
         * @param {string | null} [clientId] 
         * @param {string | null} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginApiAuthLoginPost: async (username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('loginApiAuthLoginPost', 'username', username)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('loginApiAuthLoginPost', 'password', password)
            const localVarPath = `/api/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (grantType !== undefined) { 
                localVarFormParams.set('grant_type', grantType as any);
            }
    
            if (username !== undefined) { 
                localVarFormParams.set('username', username as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.set('password', password as any);
            }
    
            if (scope !== undefined) { 
                localVarFormParams.set('scope', scope as any);
            }
    
            if (clientId !== undefined) { 
                localVarFormParams.set('client_id', clientId as any);
            }
    
            if (clientSecret !== undefined) { 
                localVarFormParams.set('client_secret', clientSecret as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutApiAuthLogoutPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Users Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readUsersMeApiAuthMeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerApiAuthRegisterPost: async (userCreate: UserCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCreate' is not null or undefined
            assertParamExists('registerApiAuthRegisterPost', 'userCreate', userCreate)
            const localVarPath = `/api/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Login
         * @param {string} username 
         * @param {string} password 
         * @param {string | null} [grantType] 
         * @param {string} [scope] 
         * @param {string | null} [clientId] 
         * @param {string | null} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginApiAuthLoginPost(username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginApiAuthLoginPost(username, password, grantType, scope, clientId, clientSecret, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.loginApiAuthLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logoutApiAuthLogoutPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logoutApiAuthLogoutPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.logoutApiAuthLogoutPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Users Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readUsersMeApiAuthMeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readUsersMeApiAuthMeGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.readUsersMeApiAuthMeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Register
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerApiAuthRegisterPost(userCreate: UserCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerApiAuthRegisterPost(userCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.registerApiAuthRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Login
         * @param {string} username 
         * @param {string} password 
         * @param {string | null} [grantType] 
         * @param {string} [scope] 
         * @param {string | null} [clientId] 
         * @param {string | null} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginApiAuthLoginPost(username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options?: RawAxiosRequestConfig): AxiosPromise<Token> {
            return localVarFp.loginApiAuthLoginPost(username, password, grantType, scope, clientId, clientSecret, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutApiAuthLogoutPost(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.logoutApiAuthLogoutPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Users Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readUsersMeApiAuthMeGet(options?: RawAxiosRequestConfig): AxiosPromise<UserResponse> {
            return localVarFp.readUsersMeApiAuthMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerApiAuthRegisterPost(userCreate: UserCreate, options?: RawAxiosRequestConfig): AxiosPromise<UserResponse> {
            return localVarFp.registerApiAuthRegisterPost(userCreate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary Login
     * @param {string} username 
     * @param {string} password 
     * @param {string | null} [grantType] 
     * @param {string} [scope] 
     * @param {string | null} [clientId] 
     * @param {string | null} [clientSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public loginApiAuthLoginPost(username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).loginApiAuthLoginPost(username, password, grantType, scope, clientId, clientSecret, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public logoutApiAuthLogoutPost(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).logoutApiAuthLogoutPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Users Me
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public readUsersMeApiAuthMeGet(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).readUsersMeApiAuthMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register
     * @param {UserCreate} userCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public registerApiAuthRegisterPost(userCreate: UserCreate, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).registerApiAuthRegisterPost(userCreate, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CardApi - axios parameter creator
 * @export
 */
export const CardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Card
         * @param {CardId} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardApiCardCardIdGet: async (cardId: CardId, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getCardApiCardCardIdGet', 'cardId', cardId)
            const localVarPath = `/api/card/{card_id}`
                .replace(`{${"card_id"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Card Users Summary
         * @param {CardId} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardUsersSummaryApiCardCardIdUsersSummaryGet: async (cardId: CardId, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getCardUsersSummaryApiCardCardIdUsersSummaryGet', 'cardId', cardId)
            const localVarPath = `/api/card/{card_id}/users/summary`
                .replace(`{${"card_id"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Card Users Summary By Collection
         * @param {CardId} cardId 
         * @param {CardCollection} collection 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardUsersSummaryByCollectionApiCardCardIdUsersSummaryCollectionGet: async (cardId: CardId, collection: CardCollection, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getCardUsersSummaryByCollectionApiCardCardIdUsersSummaryCollectionGet', 'cardId', cardId)
            // verify required parameter 'collection' is not null or undefined
            assertParamExists('getCardUsersSummaryByCollectionApiCardCardIdUsersSummaryCollectionGet', 'collection', collection)
            const localVarPath = `/api/card/{card_id}/users/summary/{collection}`
                .replace(`{${"card_id"}}`, encodeURIComponent(String(cardId)))
                .replace(`{${"collection"}}`, encodeURIComponent(String(collection)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Cards
         * @param {CardQuery} cardQuery 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardsApiCardPost: async (cardQuery: CardQuery, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardQuery' is not null or undefined
            assertParamExists('getCardsApiCardPost', 'cardQuery', cardQuery)
            const localVarPath = `/api/card/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cardQuery, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CardApi - functional programming interface
 * @export
 */
export const CardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CardApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Card
         * @param {CardId} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCardApiCardCardIdGet(cardId: CardId, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CardSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCardApiCardCardIdGet(cardId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CardApi.getCardApiCardCardIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Card Users Summary
         * @param {CardId} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCardUsersSummaryApiCardCardIdUsersSummaryGet(cardId: CardId, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CardUsersSummaryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCardUsersSummaryApiCardCardIdUsersSummaryGet(cardId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CardApi.getCardUsersSummaryApiCardCardIdUsersSummaryGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Card Users Summary By Collection
         * @param {CardId} cardId 
         * @param {CardCollection} collection 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCardUsersSummaryByCollectionApiCardCardIdUsersSummaryCollectionGet(cardId: CardId, collection: CardCollection, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CardUsersSummarySchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCardUsersSummaryByCollectionApiCardCardIdUsersSummaryCollectionGet(cardId, collection, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CardApi.getCardUsersSummaryByCollectionApiCardCardIdUsersSummaryCollectionGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Cards
         * @param {CardQuery} cardQuery 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCardsApiCardPost(cardQuery: CardQuery, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CardPaginationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCardsApiCardPost(cardQuery, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CardApi.getCardsApiCardPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CardApi - factory interface
 * @export
 */
export const CardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CardApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Card
         * @param {CardId} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardApiCardCardIdGet(cardId: CardId, options?: RawAxiosRequestConfig): AxiosPromise<CardSchema> {
            return localVarFp.getCardApiCardCardIdGet(cardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Card Users Summary
         * @param {CardId} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardUsersSummaryApiCardCardIdUsersSummaryGet(cardId: CardId, options?: RawAxiosRequestConfig): AxiosPromise<CardUsersSummaryResponse> {
            return localVarFp.getCardUsersSummaryApiCardCardIdUsersSummaryGet(cardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Card Users Summary By Collection
         * @param {CardId} cardId 
         * @param {CardCollection} collection 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardUsersSummaryByCollectionApiCardCardIdUsersSummaryCollectionGet(cardId: CardId, collection: CardCollection, options?: RawAxiosRequestConfig): AxiosPromise<CardUsersSummarySchema> {
            return localVarFp.getCardUsersSummaryByCollectionApiCardCardIdUsersSummaryCollectionGet(cardId, collection, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Cards
         * @param {CardQuery} cardQuery 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardsApiCardPost(cardQuery: CardQuery, options?: RawAxiosRequestConfig): AxiosPromise<CardPaginationResponse> {
            return localVarFp.getCardsApiCardPost(cardQuery, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CardApi - object-oriented interface
 * @export
 * @class CardApi
 * @extends {BaseAPI}
 */
export class CardApi extends BaseAPI {
    /**
     * 
     * @summary Get Card
     * @param {CardId} cardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApi
     */
    public getCardApiCardCardIdGet(cardId: CardId, options?: RawAxiosRequestConfig) {
        return CardApiFp(this.configuration).getCardApiCardCardIdGet(cardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Card Users Summary
     * @param {CardId} cardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApi
     */
    public getCardUsersSummaryApiCardCardIdUsersSummaryGet(cardId: CardId, options?: RawAxiosRequestConfig) {
        return CardApiFp(this.configuration).getCardUsersSummaryApiCardCardIdUsersSummaryGet(cardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Card Users Summary By Collection
     * @param {CardId} cardId 
     * @param {CardCollection} collection 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApi
     */
    public getCardUsersSummaryByCollectionApiCardCardIdUsersSummaryCollectionGet(cardId: CardId, collection: CardCollection, options?: RawAxiosRequestConfig) {
        return CardApiFp(this.configuration).getCardUsersSummaryByCollectionApiCardCardIdUsersSummaryCollectionGet(cardId, collection, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Cards
     * @param {CardQuery} cardQuery 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApi
     */
    public getCardsApiCardPost(cardQuery: CardQuery, options?: RawAxiosRequestConfig) {
        return CardApiFp(this.configuration).getCardsApiCardPost(cardQuery, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DeckApi - axios parameter creator
 * @export
 */
export const DeckApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get detailed view of a specific deck with all its cards
         * @summary Get Deck Detail
         * @param {string} animeLink 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeckDetailApiDeckDetailGet: async (animeLink: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'animeLink' is not null or undefined
            assertParamExists('getDeckDetailApiDeckDetailGet', 'animeLink', animeLink)
            const localVarPath = `/api/deck/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (animeLink !== undefined) {
                localVarQueryParameter['anime_link'] = animeLink;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all decks (anime grouped by anime_link) with pagination and optional search
         * @summary Get Decks
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string | null} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDecksApiDeckGet: async (page?: number, perPage?: number, query?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/deck/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeckApi - functional programming interface
 * @export
 */
export const DeckApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DeckApiAxiosParamCreator(configuration)
    return {
        /**
         * Get detailed view of a specific deck with all its cards
         * @summary Get Deck Detail
         * @param {string} animeLink 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeckDetailApiDeckDetailGet(animeLink: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeckDetailSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeckDetailApiDeckDetailGet(animeLink, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DeckApi.getDeckDetailApiDeckDetailGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all decks (anime grouped by anime_link) with pagination and optional search
         * @summary Get Decks
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string | null} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDecksApiDeckGet(page?: number, perPage?: number, query?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeckPaginationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDecksApiDeckGet(page, perPage, query, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DeckApi.getDecksApiDeckGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DeckApi - factory interface
 * @export
 */
export const DeckApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DeckApiFp(configuration)
    return {
        /**
         * Get detailed view of a specific deck with all its cards
         * @summary Get Deck Detail
         * @param {string} animeLink 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeckDetailApiDeckDetailGet(animeLink: string, options?: RawAxiosRequestConfig): AxiosPromise<DeckDetailSchema> {
            return localVarFp.getDeckDetailApiDeckDetailGet(animeLink, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all decks (anime grouped by anime_link) with pagination and optional search
         * @summary Get Decks
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string | null} [query] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDecksApiDeckGet(page?: number, perPage?: number, query?: string | null, options?: RawAxiosRequestConfig): AxiosPromise<DeckPaginationResponse> {
            return localVarFp.getDecksApiDeckGet(page, perPage, query, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DeckApi - object-oriented interface
 * @export
 * @class DeckApi
 * @extends {BaseAPI}
 */
export class DeckApi extends BaseAPI {
    /**
     * Get detailed view of a specific deck with all its cards
     * @summary Get Deck Detail
     * @param {string} animeLink 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeckApi
     */
    public getDeckDetailApiDeckDetailGet(animeLink: string, options?: RawAxiosRequestConfig) {
        return DeckApiFp(this.configuration).getDeckDetailApiDeckDetailGet(animeLink, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all decks (anime grouped by anime_link) with pagination and optional search
     * @summary Get Decks
     * @param {number} [page] 
     * @param {number} [perPage] 
     * @param {string | null} [query] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeckApi
     */
    public getDecksApiDeckGet(page?: number, perPage?: number, query?: string | null, options?: RawAxiosRequestConfig) {
        return DeckApiFp(this.configuration).getDecksApiDeckGet(page, perPage, query, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Read Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readRootGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Read Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readRootGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readRootGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.readRootGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Read Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readRootGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.readRootGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Read Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readRootGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readRootGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * HealthApi - axios parameter creator
 * @export
 */
export const HealthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Health
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthHealthGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthApi - functional programming interface
 * @export
 */
export const HealthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Health
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthHealthGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthHealthGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.healthHealthGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HealthApi - factory interface
 * @export
 */
export const HealthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthApiFp(configuration)
    return {
        /**
         * 
         * @summary Health
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthHealthGet(options?: RawAxiosRequestConfig): AxiosPromise<HealthResponse> {
            return localVarFp.healthHealthGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export class HealthApi extends BaseAPI {
    /**
     * 
     * @summary Health
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public healthHealthGet(options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).healthHealthGet(options).then((request) => request(this.axios, this.basePath));
    }
}



