#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ storage service.
–ó–∞–ø—É—Å–∫–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ –∑ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–º–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—è–º–∏.
"""

import asyncio
import tempfile
from pathlib import Path
from io import BytesIO

# –Ü–º—ñ—Ç—É—î–º–æ UploadFile –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
class MockUploadFile:
    def __init__(self, filename: str, content: bytes, content_type: str = "text/plain"):
        self.filename = filename
        self.file = BytesIO(content)
        self.content_type = content_type
    
    async def read(self):
        return self.file.read()


async def test_storage_service():
    """–¢–µ—Å—Ç—É—î —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å LocalStorageService."""
    
    try:
        from app.storage import LocalStorageService
        from app.config import settings
        
        print("‚úÖ Storage modules imported successfully")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        with tempfile.TemporaryDirectory() as temp_dir:
            storage_service = LocalStorageService(
                storage_path=temp_dir,
                base_url="/static/storage"
            )
            
            print(f"‚úÖ Storage service initialized with path: {temp_dir}")
            
            # –¢–µ—Å—Ç—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
            test_content = b"Hello, World! This is a test file."
            test_file = MockUploadFile("test.txt", test_content)
            
            saved_path = await storage_service.save(test_file, "test/test.txt")
            print(f"‚úÖ File saved at: {saved_path}")
            
            # –¢–µ—Å—Ç—É—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —ñ—Å–Ω—É–≤–∞–Ω–Ω—è
            exists = await storage_service.exists(saved_path)
            print(f"‚úÖ File exists: {exists}")
            
            # –¢–µ—Å—Ç—É—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è URL
            file_url = storage_service.get_url(saved_path)
            print(f"‚úÖ File URL: {file_url}")
            
            # –¢–µ—Å—Ç—É—î–º–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
            await storage_service.delete(saved_path)
            exists_after_delete = await storage_service.exists(saved_path)
            print(f"‚úÖ File deleted: {not exists_after_delete}")
            
            print("\nüéâ All tests passed!")
            
    except ImportError as e:
        print(f"‚ùå Import error: {e}")
        print("This test should be run in a Docker container with all dependencies installed.")
    except Exception as e:
        print(f"‚ùå Test failed: {e}")


if __name__ == "__main__":
    asyncio.run(test_storage_service())