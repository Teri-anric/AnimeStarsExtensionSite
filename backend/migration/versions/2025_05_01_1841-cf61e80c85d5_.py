"""empty message

Revision ID: cf61e80c85d5
Revises:
Create Date: 2025-05-01 18:41:50.669156

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "cf61e80c85d5"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


RANK_ENUM = sa.Enum("ASS", "S", "A", "B", "C", "D", "E", name="cardtype")
COLLECTION_ENUM = sa.Enum("TRADE", "NEED", "OWNED", name="cardcollection")
CARD_STATE_ENUM = sa.Enum("ON_TRADE", "LOCKED", "FRIENDS_ONLY", "TROPHY", name="cardstate")
SUMMARY_CARD_STATE_ENUM = sa.Enum("LOCKED", "UNLOCKED", name="summarycardstate")


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "animestars_users",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("username", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_animestars_users_username",
        "animestars_users",
        [sa.literal_column("lower(username)")],
        unique=True,
    )
    op.create_table(
        "animestars_cards",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("card_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column(
            "rank",
            RANK_ENUM,
            nullable=False,
        ),
        sa.Column("anime_name", sa.String(), nullable=True),
        sa.Column("anime_link", sa.String(), nullable=True),
        sa.Column("author", sa.String(), nullable=True),
        sa.Column("image", sa.String(), nullable=False),
        sa.Column("mp4", sa.String(), nullable=True),
        sa.Column("webm", sa.String(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["author"],
            ["animestars_users.username"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_animestars_cards_card_id"),
        "animestars_cards",
        ["card_id"],
        unique=True,
    )
    op.create_table(
        "animestars_card_users",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("card_id", sa.Integer(), nullable=False),
        sa.Column("user_username", sa.String(), nullable=False),
        sa.Column(
            "collection",
            COLLECTION_ENUM,
            nullable=False,
        ),
        sa.Column(
            "state",
            CARD_STATE_ENUM,
            nullable=True,
        ),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["card_id"],
            ["animestars_cards.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_username"],
            ["animestars_users.username"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_animestars_card_users_card_id"),
        "animestars_card_users",
        ["card_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_animestars_card_users_collection"),
        "animestars_card_users",
        ["collection"],
        unique=False,
    )
    op.create_index(
        op.f("ix_animestars_card_users_user_username"),
        "animestars_card_users",
        ["user_username"],
        unique=False,
    )
    op.create_table(
        "animestars_summary_card_users",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("card_id", sa.Integer(), nullable=False),
        sa.Column(
            "collection",
            COLLECTION_ENUM,
            nullable=False,
        ),
        sa.Column(
            "state",
            SUMMARY_CARD_STATE_ENUM,
            nullable=False,
        ),
        sa.Column("count", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["card_id"],
            ["animestars_cards.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_animestars_summary_card_users_card_id"),
        "animestars_summary_card_users",
        ["card_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_animestars_summary_card_users_collection"),
        "animestars_summary_card_users",
        ["collection"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_animestars_summary_card_users_collection"),
        table_name="animestars_summary_card_users",
    )
    op.drop_index(
        op.f("ix_animestars_summary_card_users_card_id"),
        table_name="animestars_summary_card_users",
    )
    op.drop_table("animestars_summary_card_users")
    op.drop_index(
        op.f("ix_animestars_card_users_user_username"),
        table_name="animestars_card_users",
    )
    op.drop_index(
        op.f("ix_animestars_card_users_collection"),
        table_name="animestars_card_users",
    )
    op.drop_index(
        op.f("ix_animestars_card_users_card_id"),
        table_name="animestars_card_users",
    )
    op.drop_table("animestars_card_users")
    op.drop_index(
        op.f("ix_animestars_cards_card_id"), table_name="animestars_cards"
    )
    op.drop_table("animestars_cards")
    op.drop_index(
        "idx_animestars_users_username", table_name="animestars_users"
    )
    op.drop_table("animestars_users")
    # ### end Alembic commands ###

    bind = op.get_bind()

    RANK_ENUM.drop(bind, checkfirst=False)
    CARD_STATE_ENUM.drop(bind, checkfirst=False)
    SUMMARY_CARD_STATE_ENUM.drop(bind, checkfirst=False)
    COLLECTION_ENUM.drop(bind, checkfirst=False)

