import asyncio
from sqlalchemy.ext.asyncio import AsyncSession

from ..database.connection import get_async_session
from ..parser.services import VerificationService


async def send_verification_code(username: str):
    """Send a verification code to the specified username."""
    async with get_async_session() as session:
        verification_service = VerificationService(session)
        code = await verification_service.create_and_send_code(username)
        print(f"–ö–æ–¥ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó {code} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {username}")


async def verify_code(username: str, code: str):
    """Verify the provided code for the username."""
    async with get_async_session() as session:
        verification_service = VerificationService(session)
        is_valid = await verification_service.verify_code(username, code)
        
        if is_valid:
            print(f"–ö–æ–¥ {code} —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {username}")
        else:
            print(f"–ö–æ–¥ {code} –Ω–µ–≤—ñ—Ä–Ω–∏–π –∞–±–æ –∑–∞—Å—Ç–∞—Ä—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {username}")


async def cleanup_expired_codes():
    """Clean up expired verification codes."""
    async with get_async_session() as session:
        verification_service = VerificationService(session)
        await verification_service.cleanup_expired_codes()
        print("‚úÖ –ó–∞—Å—Ç–∞—Ä—ñ–ª—ñ –∫–æ–¥–∏ —É—Å–ø—ñ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ")


async def delete_expired_codes():
    """Delete expired verification codes."""
    async with get_async_session() as session:
        verification_service = VerificationService(session)
        await verification_service.delete_expired_codes()
        print("‚úÖ –ó–∞—Å—Ç–∞—Ä—ñ–ª—ñ –∫–æ–¥–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ")


async def cleanup_old_codes(days_old: int = 7):
    """Clean up old verification codes."""
    async with get_async_session() as session:
        verification_service = VerificationService(session)
        await verification_service.cleanup_old_codes(days_old)
        print(f"‚úÖ –ö–æ–¥–∏ —Å—Ç–∞—Ä—ñ—à–µ {days_old} –¥–Ω—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ")


async def get_stats():
    """Get verification codes statistics."""
    async with get_async_session() as session:
        verification_service = VerificationService(session)
        stats = await verification_service.get_stats()
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–¥—ñ–≤ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó:")
        print(f"  - –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {stats['total']}")
        print(f"  - –ê–∫—Ç–∏–≤–Ω—ñ: {stats['active']}")
        print(f"  - –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ: {stats['used']}")
        print(f"  - –ó–∞—Å—Ç–∞—Ä—ñ–ª—ñ: {stats['expired']}")


def main():
    import argparse
    
    parser = argparse.ArgumentParser(description="Verification code management")
    subparsers = parser.add_subparsers(dest="command", help="Available commands")
    
    # Send code command
    send_parser = subparsers.add_parser("send", help="Send verification code")
    send_parser.add_argument("username", help="Username to send code to")
    
    # Verify code command
    verify_parser = subparsers.add_parser("verify", help="Verify code")
    verify_parser.add_argument("username", help="Username")
    verify_parser.add_argument("code", help="Verification code")
    
    # Cleanup command
    cleanup_parser = subparsers.add_parser("cleanup", help="Deactivate expired codes")
    
    # Delete expired command
    delete_parser = subparsers.add_parser("delete-expired", help="Delete expired codes")
    
    # Cleanup old command
    cleanup_old_parser = subparsers.add_parser("cleanup-old", help="Clean up old codes")
    cleanup_old_parser.add_argument("--days", type=int, default=7, help="Days old (default: 7)")
    
    # Stats command
    stats_parser = subparsers.add_parser("stats", help="Get verification codes statistics")
    
    args = parser.parse_args()
    
    if args.command == "send":
        asyncio.run(send_verification_code(args.username))
    elif args.command == "verify":
        asyncio.run(verify_code(args.username, args.code))
    elif args.command == "cleanup":
        asyncio.run(cleanup_expired_codes())
    elif args.command == "delete-expired":
        asyncio.run(delete_expired_codes())
    elif args.command == "cleanup-old":
        asyncio.run(cleanup_old_codes(args.days))
    elif args.command == "stats":
        asyncio.run(get_stats())
    else:
        parser.print_help()


if __name__ == "__main__":
    main()